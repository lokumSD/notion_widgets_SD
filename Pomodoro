<!DOCTYPE html>
<html>
<head>
    <title>Pomodoro Timer</title>
    <style>
        body {
            text-align: center;
            font-family: Arial, sans-serif;
        }

        .timer-container {
            border-radius: 20px;
            padding: 30px 100px;
            padding-bottom: 50px;
            display: inline-block;
            color: #1B1D36;
        }

        .timer-controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 30px;
        }

        .timer-inputs {
            display: flex;
            flex-direction: row;
            justify-content: center;
            margin-top: 45px;
            margin-bottom: 10px;
        }

        .timer-input {
            margin-right: 40px;
            border:4px solid #DEDEDE;
            border-radius: 18px;
            color: #8C8C8C;
            font-weight: bold;
            background-color: #ffe6ff;
            text-align: center; 
        }

        .timer-label {
            font-size: 16px;
            margin-right: 5px;
            font-weight: bold;
            color: #8C8C8C; 

        }

        #timer {
            font-size: 150px;
            font-weight: bold;
            color:;
        }

        #phase {
            font-size: 50px;
            font-weight: bold;
            color: #8C8C8C;
            margin-top: 50px;
            margin-bottom: 75px;
        }

        #controls {
            margin-top: 20px;
            
        }

        .button-container {
            display: flex;
            flex-direction: row;
            justify-content: center;
            width: 300px; /* Set a fixed width for the button container */
        }

   .timer-button {
    padding: 20px 80px;
    font-size: 32px;
    border: 4px solid #DEDEDE;
    border-radius: 18px;
    color: #F09683;
    cursor: pointer;
    margin: 20px;
    min-width: 250px; /* Set a fixed width for the buttons */
    font-weight: bold;
    display: flex;
    justify-content: center;
}



        input[type="text"] {
            width: 60px;
            font-size: 16px;
        }
    </style>
</head>
<body>

    <div class="timer-container" id="timerContainer" style="background-color: #FFD3DA;">
        <div id="timer">60:00</div>
        <div id="phase">Work</div>
        <audio id="timerAudio" src="https://lokumsd.github.io/audiofiles/Pomodoro_Alarm.wav" preload="auto"></audio>
        <div class="timer-controls">
            <div class="button-container">
                <button id="startButton" class="timer-button" onclick="startOrPauseTimer()">Start</button>
                <button id="resetButton" class="timer-button" onclick="resetTimer()">Reset</button>
            </div>
            <div class="timer-inputs">
                <div>
                    <label class="timer-label" for="workDuration">Work Timer:</label>
                    <input type="text" id="workDuration" class="timer-input" placeholder="mm:ss" value="60:00">
                </div>
                <div>
                    <label class="timer-label" for="breakDuration">Break Timer:</label>
                    <input type="text" id="breakDuration" class="timer-input" placeholder="mm:ss" value="10:00">
                </div>
                <div>
                    <label class="timer-label" for="longBreakDuration">Long Break Timer:</label>
                    <input type="text" id="longBreakDuration" class="timer-input" placeholder="mm:ss" value="20:00">
                </div>
            </div>
        </div>
    </div>

    <script>
        let interval;
        let workMinutes = 60;
        let workSeconds = 00;
        let breakMinutes = 10;
        let breakSeconds = 0;
        let longBreakMinutes = 20;
        let longBreakSeconds = 00;
        let isWorkTimer = true;
        let isRunning = false;
        let initialWorkMinutes = 0;
        let initialWorkSeconds = 2;
        let shouldAutoReset = false;
        let workSessions = 0;
        let maxShortBreakSessions = 3;
        let shortBreakSessions = 0;

        function startOrPauseTimer() {
            if (!isRunning) {
                isRunning = true;
                document.getElementById("startButton").textContent = "Pause";
                document.getElementById("resetButton").style.display = "none";
                interval = setInterval(updateTimer, 1000);
            } else {
                isRunning = false;
                document.getElementById("startButton").textContent = "Resume";
                document.getElementById("resetButton").style.display = "inline";
                clearInterval(interval);
            }
        }

        function resetTimer() {
            isRunning = false;
            document.getElementById("startButton").textContent = "Start";
            document.getElementById("resetButton").style.display = "inline";
            clearInterval(interval);

            const workDurationInput = document.getElementById("workDuration").value.split(":");
            const breakDurationInput = document.getElementById("breakDuration").value.split(":");
            const longBreakDurationInput = document.getElementById("longBreakDuration").value.split(":");

            initialWorkMinutes = workMinutes = parseInt(workDurationInput[0]) || 0;
            initialWorkSeconds = workSeconds = parseInt(workDurationInput[1]) || 0;

            breakMinutes = parseInt(breakDurationInput[0]) || 0;
            breakSeconds = parseInt(breakDurationInput[1]) || 0;

            longBreakMinutes = parseInt(longBreakDurationInput[0]) || 0;
            longBreakSeconds = parseInt(longBreakDurationInput[1]) || 0;

            isWorkTimer = true;
            document.getElementById("phase").textContent = "Work";
            updateDisplay();
            updateBackgroundColor('#FFD3DA');
        }

        function updateTimer() {
            if (isWorkTimer) {
                if (workMinutes === 0 && workSeconds === 0) {
                    workSessions++;
                    shortBreakSessions++;
                    if (shortBreakSessions === maxShortBreakSessions) {
                        breakMinutes = longBreakMinutes;
                        breakSeconds = longBreakSeconds;
                        shortBreakSessions = 0;
                        document.getElementById("phase").textContent = "Long Break";
                        updateBackgroundColor('#BFEDBE'); // Background color for long break
                    } else {
                        breakMinutes = parseInt(document.getElementById("breakDuration").value.split(":")[0]) || 0;
                        breakSeconds = parseInt(document.getElementById("breakDuration").value.split(":")[1]) || 0;
                        document.getElementById("phase").textContent = "Break";
                        updateBackgroundColor('#97C3D4'); // Background color for short break
                    }
                    isWorkTimer = false;
                    shouldAutoReset = true;
                    playTimerAudio(); // Play audio when the timer is up
                } else if (workSeconds === 0) {
                    if (workMinutes === 0) {
                        workMinutes = 0;
                        workSeconds = 0;
                    } else {
                        workMinutes--;
                        workSeconds = 59;
                    }
                } else {
                    workSeconds--;
                }
            } else {
                if (breakMinutes === 0 && breakSeconds === 0) {
                    isWorkTimer = true;
                    document.getElementById("phase").textContent = "Work";
                    workMinutes = initialWorkMinutes;
                    workSeconds = initialWorkSeconds;
                    if (shouldAutoReset) {
                        resetTimer();
                        shouldAutoReset = false;
                    }
                    updateBackgroundColor('#FFD3DA'); // Background color for work
                    playTimerAudio(); // Play audio when the timer is up
                } else if (breakSeconds === 0) {
                    if (breakMinutes === 0) {
                        breakMinutes = 0;
                        breakSeconds = 0;
                    } else {
                        breakMinutes--;
                        breakSeconds = 59;
                    }
                } else {
                    breakSeconds--;
                }
            }
            updateDisplay();
        }

        function updateDisplay() {
            const timerDisplay = document.getElementById("timer");
            if (isWorkTimer) {
                timerDisplay.textContent = `${workMinutes < 10 ? '0' : ''}${workMinutes}:${workSeconds < 10 ? '0' : ''}${workSeconds}`;
            } else {
                timerDisplay.textContent = `${breakMinutes < 10 ? '0' : ''}${breakMinutes}:${breakSeconds < 10 ? '0' : ''}${breakSeconds}`;
            }
        }

        function updateBackgroundColor(color) {
            document.getElementById("timerContainer").style.backgroundColor = color;
        }

        function playTimerAudio() {
            const timerAudio = document.getElementById("timerAudio");
            timerAudio.play();
        }
    </script>
</body>
</html>
